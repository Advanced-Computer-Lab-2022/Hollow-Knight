import { useState ,useEffect} from "react";
import * as React from 'react';
import Button from '@mui/material/Button';
import Dialog from '@mui/material/Dialog';
import DialogActions from '@mui/material/DialogActions';
import DialogContent from '@mui/material/DialogContent';
import DialogContentText from '@mui/material/DialogContentText';
import DialogTitle from '@mui/material/DialogTitle';
import { Typography } from "@mui/material";
import { useAuthContext } from "../hooks/useAuthContext";

const C1=()=>{
     
    const params = new URLSearchParams(window.location.search);
    const userId = params.get('userId');
    const [open, setOpen] = useState(false);
    const [instructors, setInstructors] = useState(null)
    const [check, setCheck] = useState(false)
    const { user } =  useAuthContext();
    console.log(user,"hi")

   useEffect(() => {
   
        const handle = async () => {
          
        
          //e.preventDefault()
          const response = await fetch(`/api/instructors/getinst`,
          {
            method: 'GET',
            headers: {
              'Content-Type': 'application/json',
              'Authorization': `Bearer ${user.token}`
    
    
            }
        });
      
          const json = await response.json()
          //console.log(json)
          if (!response.ok) {
            console.log("error")

          }
          setInstructors(json)
        }
        if(user){
        handle()
        }
        
    }, [user])
  

   
 
    const handleAccept = async(e) => {
        const Status ="Accepted"
const percent =instructors.contract.percent
  const acc={Status,percent}
  e.preventDefault()
  const response = await fetch(`/api/instructors/updatecontract`, {
    method: 'PATCH',
    body: JSON.stringify(acc),
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${user.token}`
    }
  })
  const json = await response.json()
  console.log("here")
  if (!response.ok) {
   console.log("error")
  }
  console.log("here")
  console.log(json)
      setOpen(false);
      setCheck(true)
    };

    const handleReject = async(e) => {
        const Status ="Rejected"
const percent =instructors.contract.percent
  const acc={Status,percent}
  e.preventDefault()
  const response = await fetch(`/api/instructors/updatecontract`, {
    method: 'PATCH',
    body: JSON.stringify(acc),
    headers: {
      'Content-Type': 'application/json',
      'Authorization': `Bearer ${user.token}`
    }
  })
  const json = await response.json()
  console.log("here")
  if (!response.ok) {
   console.log("error")
  }
  console.log("here")
  console.log(json)
      setOpen(false);
      setCheck(true)
    };


      
      
      if(instructors){
  
        if(instructors.contract.Status=="Pending"&& !check)
        {
         console.log("go")
         console.log(open)
         console.log(instructors.contract)
        if(!open){
            console.log("hi")
            setOpen(true)

        }
      
        }
       }
  

    return(
        <div>
   
      {instructors && <Dialog
        open={open}
     
        keepMounted
        onClose={handleReject}
        aria-describedby="alert-dialog-slide-description"
      >
        <DialogTitle>{"Contract Agreement"}</DialogTitle>
        <DialogContent>
          <DialogContentText id="alert-dialog-slide-description">{<div>
          
<p>

    <Typography sx={{fontSize:20 , marginBottom:2}}> This contract is to state that you have agreed to give our company Exclusive Rights to all your Courses added to our platform, including But not limiited to, all videos created by you regarding the course content and other materials including :
     Exercises , Exams and  their respictive solutions.</Typography>
    
     
      <Typography sx={{fontSize:20 , marginBottom:2}} >And  Also that company is set to taken in {100-instructors.contract.percent}% of the Profit generated by each course , for each registartion to the 
     course by a user.  
</Typography> 
<Typography sx={{fontSize:20 , marginBottom:2}}   > Note : You can't add any courses until you agree to this contract</Typography> 

  

  
</p></div>}
          </DialogContentText>
        </DialogContent>
        <DialogActions>
          <Button onClick={handleReject}>Disagree</Button>
          <Button onClick={handleAccept}>Agree</Button>
        </DialogActions>
    </Dialog> }
    </div>
    )
}
export default C1;